/* A brief description of the role of this class:
 * An Encryptable class that uses a Caesar cipher to encrypt/decrypt strings

 * Student Name: Jeffin Tom

 * Student Number:041094535

 * Course: CST8132 Object Oriented Programming

 * Program: CET-CS-Level 2

 * Professor:  James Mwangi PhD

 *

 */
package ciphers;

import encryption.Encryptable;
// imports the Encryptable interface from the encryption package.
/**
 * 
 * @author leoje
 *
 */

	// uses the values from encryptable interface
	public class CaesarCipher implements Encryptable {
		// declares  CaesarCipher that implements the Encryptable interface
	    private int key;
	    // declares a private instance variable named key

	    public CaesarCipher(int shift) {	//shift for the adding number/character
	    	//  constructor for the CaesarCipher class. It takes integer which has a parameter shift and assigns its value to the key variable.
	        this.key = shift;
	    }
	    /**
	     * @Override
	     */
	    // for the calcution of the encrypt class by according to the shift
	    // Encrypts the given input string using the Caesar cipher algorithm.
	    
	  

// The encrypt method takes a String input and returns a String.
	    public String encrypt(String input) {
	    	// 	A new StringBuilder object named encryptedText is created to construct the encrypted text.
	        StringBuilder encryptedText = new StringBuilder();
	        // Converts the input string to a character array using the toCharArray() method 
	        // and initiates a loop to iterate over each character chara in the input string.
	        for (char chara : input.toCharArray()) {
	        	//Checks if the current character chara is within the valid range of characters.
	            if (chara >= START_CHAR && chara <= END_CHAR) {
	            	// calculates the shifted character value by adding the 
	            	// key to the ASCII value of the current character chara
	                int shiftedChar = chara + key;
	                // handle cases where the shifted character value exceeds the valid range. 
	                if (shiftedChar > END_CHAR) {
	                    shiftedChar = START_CHAR + (shiftedChar - END_CHAR - 1);
	                } else if (shiftedChar < START_CHAR) {
	                    shiftedChar = END_CHAR - (START_CHAR - shiftedChar - 1);
	                }
	                encryptedText.append((char) shiftedChar);
	            } else {
	            	//  appends the shifted character which is 
	            	//casted back to char, to the encryptedText StringBuilder object.
	                encryptedText.append(chara);
	            }
	        }
	        // Converts the encryptedText StringBuilder object to a String 
	        // returns it as the result of the encrypt method.
	        return encryptedText.toString(); // converting into string
	    }

	    /**
	     * @Override
	     */
	    //for the calcution of the decrypt class by according to the shift
	    // decrypts the given input string using the Caesar cipher algorithm.
	    
	    public String decrypt(String input) {
	        StringBuilder decryptedText = new StringBuilder();// StringBuilder to store the decrypted text
	        for (char chara : input.toCharArray()) {
	            if (chara >= START_CHAR && chara <= END_CHAR) {
	                int shiftedChar = chara - key;
	                if (shiftedChar > END_CHAR) {
	                    shiftedChar = START_CHAR + (shiftedChar - END_CHAR - 1);
	                } else if (shiftedChar < START_CHAR) {
	                    shiftedChar = END_CHAR - (START_CHAR - shiftedChar - 1);
	                }
	                decryptedText.append((char) shiftedChar);
	            } else {
	                decryptedText.append(chara);
	            }
	        }
	        return decryptedText.toString();
	    }
}
	
	